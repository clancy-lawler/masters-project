initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	
	//define variables to be tested 
	if (exists("slimgui")) {
		defineConstant("RELEASE", 100); //number of release individuals 
		defineConstant("GENERATION", 15); //drive release generation
		defineConstant("MOVEMENT", 0.2); //per generation movement
	}
	
	//define constants
	defineConstant("bias", 0.999);
	defineConstant("COST", 0.0); //between 0 and -1 
	defineConstant("D", 0.005); //proximity to mother - measued as a proportion of simulated space 
	defineConstant("choice", 0.0); //the proportional reduction in likelihood of being chosen as a mate 
	defineConstant("var", 0.0695); //the sd of the draw rnorm(1, 0, var) that is added to mate choice - represents the variation in mate chose for all genotype
	defineConstant("K",10); // related to maximum number of individuals in P1 though interaction with competition and age based mortality
	defineConstant("K2", 2000); //drive source carying capacity. Source population has simple dynamics
	defineConstant("Y_pos", 50000); // male marker mutation
	defineConstant("L", c(1, 1, 1, 1, 1, 1, 1, 1, 0)); //as fitness is a fucntion of spatial competition and survival is calculated each generation, the population structure is heavily skewed towards young individuals.
	
	defineConstant("no_pseudo_subpops", 100);//number of pseudo subpopulations the continuous space is broken into
	defineConstant("S", 0.3);   // used for spatial dynamics
	
	//create the chromsomes 
	initializeMutationRate(0); // removeing muttion rate 
	initializeMutationType("m1", 0.5, "f", 0.0); //PAR
	initializeMutationType("m2", 0.5, "f", 0.0); //non-PAR
	initializeMutationType("m3", 1.0, "f", 0.0); //Y marker
	initializeMutationType("m4", 1.0, "f", COST); //drive mutation
	
	m3.color = "green"; //changes the colour of the mutations for easy tracking
	m4.color = "red";
	
	// 6 Mb chromosome; the PAR is 2.7 Mb at the start
	initializeGenomicElementType("g1", m1, 1.0);//PAR: m1 only
	initializeGenomicElementType("g2", m2, 1.0);//non-PAR: m2 only
	
	initializeGenomicElement(g1, 0, 24999); // PAR
	initializeGenomicElement(g2, 25000, 99999); //non-PAR
	
	// turn on sex and model as an autosome
	initializeSex("A");
	
	// set up chromosomes
	initializeRecombinationRate(c(1e-8, 0), c(24999, 99999), sex="M");
	initializeRecombinationRate(1e-8, sex="F");
	
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=2*MOVEMENT);
}

///////////////code within this section is adapted from the champer paper //////////////////////////////////////

reproduction(p1, "F") {
	mut = sim.mutationsOfType(m4);//drive mutation
	neighbours = i2.nearestNeighbors(individual, 40); // select a large pool of motential mates from the surounding males within interacting distance
	potential_mate = neighbours[neighbours.sex == "M"]; // potential mates are male 
	potential_mate = potential_mate[potential_mate.age > 0];//potential mates but be of reprodutive age

	if(individual.age > 0){
		// First, select two random potential mate.
		if(potential_mate.size()){
			selected_mate1 = sample(potential_mate, 1);
			selected_mate2 = sample(potential_mate, 1);
			
			// Give a scores to the potential mates
			mate_attractiveness1 = ((selected_mate1.countOfMutationsOfType(m4) * choice) + 1.1)+ rnorm(1, 0, var);
			mate_attractiveness2 = ((selected_mate2.countOfMutationsOfType(m4) * choice) + 1.1)+ rnorm(1, 0, var);
			
			
			//if mate1 > 1 but < 1.1 and mate2 > 1 - mate twice 
			//if mate1 >= 1.1 - mate once
			
			attempt_no = 0;
			while (1) {
				if (!selected_mate1.size())
					return;  // there are no potential mates present
				if (mate_attractiveness1 >= 1.1)
					break;  // selecte mate1 and mate only once
				if (mate_attractiveness1 > 1  & mate_attractiveness2 > 1)
					break; // select mate1 and mate2.  
				attempt_no = attempt_no + 1;
				if (attempt_no == 9)
					return;
			}
			
			if (sim.generation % 10 == 0)
				litterSize = 0; //during the simulated winter event there are no offspring generated
			else
				litterSize = asInteger(rnorm(1, 5, 1));
			
			first_mate = asInteger(litterSize * 0.2);//first mate sires 02% of all produced offspring
			second_mate = asInteger(litterSize*0.8);// second mate sires 80% of all produced offspring
			if (mate_attractiveness1 > 1 & mate_attractiveness1 < 1.1 & mate_attractiveness2 > 1)
			{
				for (j in seqLen(first_mate)){
					if (selected_mate1.containsMutations(mut))
						subpop.addCrossed(individual, selected_mate1, bias);//if the first mate is a gene drive individual, bias sex ratios towards males by 99.9%
					if (!selected_mate1.containsMutations(mut))
						subpop.addCrossed(individual, selected_mate1); // if the first mate does not contain the gene drive, the offspring ratio is not biased  
				}
				for (i in seqLen(second_mate)){//the same occurs for the second mate
					if (selected_mate2.containsMutations(mut))
						subpop.addCrossed(individual, selected_mate2, bias);
					if (!selected_mate2.containsMutations(mut))
						subpop.addCrossed(individual, selected_mate2);
				}
			}
			if (mate_attractiveness1 >= 1.1){//the same occurs if the female mates only once
				for(i in seqLen(litterSize)){
					if (selected_mate1.containsMutations(mut))
						subpop.addCrossed(individual, selected_mate1, bias);
					if (!selected_mate1.containsMutations(mut))
						subpop.addCrossed(individual, selected_mate1);
				}
			}
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////

reproduction(p2, "F") { // the sourse population reproduced simply and randomly within the population
	mate = subpop.sampleIndividuals(1, sex="M", minAge = 1);
	litterSize = rnorm(1, 100, 5);
	for (i in (litterSize))
		offspring = subpop.addCrossed(individual, mate);
}

//initialise the populations
1 early() {
	sim.addSubpop("p1", 100);
	sim.subpopulations.individuals.age = rdunif(100, min=0, max=4);//initial population of 100 individuals of age 0 to 4 generations old
	i = p1.individuals;
	i[i.sex == "M"].genome2.addNewMutation(m3, 0.0, 99999); //marker mutation of the males
	p1.setSpatialBounds(c(0.0, 0.0, 10.0, 10.0)); // set the space to be a square 10x10
	p1.individuals.x = runif(p1.individualCount, 0, MOVEMENT);//starting postions are uniform between x,y 0,0 and one generation of movement
	p1.individuals.y = runif(p1.individualCount, 0, MOVEMENT);
	

}

//source population - released from here but not involved in the metapopulation
1 early () {
	sim.addSubpop("p2", K2);
	p2.individuals.age = rdunif(K2, min=0, max=3);
	i = p2.individuals;
	i[i.sex == "M"].genome2.addNewMutation(m4, 0.0, Y_pos);
	i[i.sex == "M"].genome2.addNewMutation(m3, 0.0, 99999);
}

early(){//set the colour of the wildtype individuals to white and the drive individuals to red for easy identification
	allinds = p1.individuals;
	allinds.color = "white";
	allinds[allinds.countOfMutationsOfType(m4) == 1].color = "red";
}

modifyChild(p1) {
	// childs position is set to be within bound and near mother 
	do child.x = parent1.x + rnorm(1, 0, D);
	while ((child.x < 0.0) | (child.x > 10.0));
	do child.y = parent1.y + rnorm(1, 0, D);
	while ((child.y < 0.0) | (child.y > 10.0));
	return T;
}

modifyChild(){
	// make sure males contain male marker mutation
	if (child.sex == "F")
		return !childGenome2.containsMarkerMutation(m3, 99999);
	else
		return childGenome2.containsMarkerMutation(m3, 99999);
}

10:110 early () { //individuals can be released between generation 10 and 110
	inds = p1.individuals;
	drive = inds[inds.countOfMutationsOfType(m4) == 1];
	not_drive = inds[inds.countOfMutationsOfType(m4) == 0];
	max_x_value = max(not_drive.x);
	max_y_value = max(not_drive.y); //the release is uniformly distributed over all areas with suzukii
	//using the value of the furthest traveled individual as the radius for release 
	
	if (sim.generation == (GENERATION + 10))
		if (size(not_drive) > 10){//release only if there is a detectable number of individuals within the population
			drive_inds = p2.sampleIndividuals(RELEASE, sex = "M");
			p1.takeMigrants(drive_inds);
			
			if(max_x_value - max_y_value > 0) //define the release radious
				r=max_x_value+(2*MOVEMENT);
			if(max_x_value - max_y_value < 0)
				r=max_y_value+(2*MOVEMENT);
			
			for (inds in drive_inds){//define the release area of the drive individuals
				do inds.x=runif(1, 0, r);
				while ((inds.x < 0.0) | (inds.x > 10.0));
				do inds.y=runif(1, 0, sqrt((r^2-inds.x^2)+MOVEMENT)); //uniform distribution of drive individuals between x,y 0,0 and the radios defined by the furthest individual, plus one generation of movement.
				while ((inds.y < 0.0) | (inds.y > 10.0));
			}
		}
}

late(){//evalue at interacting individuals
	i2.evaluate();
	i1.evaluate();
}

1 late(){//set a matrix to monitor the occurence of chase within the pseudo subpopulations
	tag0=matrix(rep(0,100), nrow=10);
	defineConstant("tag1", tag0);
}
2:late() {
	
	// life table based individual mortality for the sourse population 
	p2_inds = p2.individuals;
	p2_ages = p2_inds.age;
	mortality = L[p2_ages];
	survival = mortality;
	p2_inds.fitnessScaling = survival;
	p2.fitnessScaling = (K2) / (p2.individualCount * mean(survival));
	
	
	// mortality based on spatial competition for individuals in the observed population
	
	inds = p1.individuals;
	age_mortality = L[inds.age];
	competition = i1.totalOfNeighborStrengths(inds);//strength of competition is based on the number of individuals within interacting distance
	competition = (competition + 1) / (PI*S^2); //competition is all individuals within the circumference defined by S
	inds.fitnessScaling = (K / competition) * age_mortality;//this sets the age limit within the population 
	if (sim.generation % 10 == 0) //during winter, mortality is increased 
		inds.fitnessScaling = ((K / competition) * age_mortality) * 0.6;
	
	
	for (ind in p1.individuals)
	{
		if(ind.fitnessScaling >0){//at the end of each generation individuals move around
			do newPos = ind.spatialPosition + rnorm(2, 0.0, MOVEMENT);
			while (!p1.pointInBounds(newPos));
			ind.setSpatialPosition(newPos);
		}
	}
	
	/////////////////////////////////// code within this section is adapted from the champer paper /////////////////	
	nondrive = inds[inds.countOfMutationsOfType(m4) == 0];//identify all non-drive individuals 
	nondrive_males = size(nondrive[nondrive.sex == "M"]);
	drive = inds[inds.countOfMutationsOfType(m4) == 1];//identify all drive individuals 
	nonx = nondrive.x;//define the spatial location of drive and non-drive individuals 
	nony = nondrive.y;
	drivex = drive.x;
	drivey = drive.y;
	allx = inds.x;
	ally = inds.y;
	pos_vec = 0:(sqrt(no_pseudo_subpops) - 1); //vector for the pseudo subpops
	dim = length(pos_vec);
	cell_width = 1.0; // define space of each pseudo subpopulation
	positions = pos_vec * cell_width;
	nondrive_track = c();
	all_track = c();
	
	
	
	for (i in 0:(dim-1)) {
		div_left = positions[i];
		for (j in 0:(dim-1)) {
			div_bot = positions[j];
			nondrive_in_division = (nonx >= div_left) & (nonx < (div_left + cell_width)) & (nony >= div_bot) & (nony < (div_bot + cell_width)); //identify if there are non-drive individuals in the pseudo subpop
			drive_in_division = (drivex >= div_left) & (drivex < (div_left + cell_width)) & (drivey >= div_bot) & (drivey < (div_bot + cell_width)); //identify if there are drive individuals within the pseudo subpop
			
			nondrive_in_cell = nondrive[nondrive_in_division];
			drive_in_cell = drive[drive_in_division];
			
			nondrive_cell_count = size(nondrive_in_cell); //the number of non drive individuals in the cell 
			drive_cell_count = size(drive_in_cell); // the number of drive individuals within the cell 
			
			if(drive_cell_count > 0 &	nondrive_cell_count > 0) 
				tag1[i,j] = 1;// track if the pseudo subpop has both drive and non-drive individuals present
			if(tag1[i,j] == 1 & drive_cell_count == 0 &	nondrive_cell_count == 0)
				tag1[i,j] = -1; //track if all individials within the pseudo subpop are eradicated
			if(tag1[i,j] == -1 & nondrive_cell_count != 0)
				tag1[i,j] = 3; //track if the pseudo subpop is reco
			if(tag1[i,j] == 3 & drive_cell_count != 0)
				tag1[i,j] = 2; // track if the pseudo subpop is eradicated 
		
		}
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	if (p1.individualCount < 2 & any(tag1 ==2)){//if p1 has less then 2 individuals present, population has been eradicated and the simulation ends. note if chase has occured
		catn(sim.generation + " " + "optomised" + " " + "single" + " " + "x_shredder" + " " + "y" + " " + "fixed");
		sim.simulationFinished();
	}
	if (p1.individualCount < 2 & all(tag1 !=2)){
		catn(sim.generation + " " + "optomised" + " " + "single" + " " + "x_shredder" + " " + "n" + " " + "fixed");
		sim.simulationFinished();
	}
}


110: late(){ //if there are no drive individuals after the last posible release at generation 110, the drive has been lost from the population and the simulation ends. note if chase has occured 
	mut = sim.mutationsOfType(m4);
	if (sim.mutationFrequencies(p1, mut) == 0 & any(tag1 ==2)){
		catn(sim.generation + " " + "optomised" + " " + "single" + " " + "x_shredder" + " " + "y" + " " +  "lost");
		sim.simulationFinished();
	}
	if (sim.mutationFrequencies(p1, mut) == 0 & all(tag1 !=2)){
		catn(sim.generation + " " + "optomised" + " " + "single" + " " + "x_shredder" + " " + "n" + " " +  "lost");
		sim.simulationFinished();
	}
}

210 late (){//if the simulation is still running at generation 210, than the drive is still present within the population and the simulation finishes. note if chase has occured
	if(any(tag1 == 2))
		catn(sim.generation + " " + "optomised" + " " + "single" + " " + "x_shredder" + " " + "y" +  " " + "stable");
	if(all(tag1 != 2))
		catn(sim.generation + " " + "optomised" + " " + "single" + " " + "x_shredder" + " " + "n" + " " + "stable");
	sim.simulationFinished();
}